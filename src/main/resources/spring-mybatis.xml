<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans    
						http://www.springframework.org/schema/beans/spring-beans-4.0.xsd    
                        http://www.springframework.org/schema/context    
                        http://www.springframework.org/schema/context/spring-context-4.0.xsd    
                        http://www.springframework.org/schema/tx 
                        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
                        http://www.springframework.org/schema/aop
						http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
                        http://www.springframework.org/schema/mvc    
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">  
	<!-- 引入配置文件 -->
	<bean id="propertyConfigurer" class="ikaoyaner.util.spring.CustomizedPropertyPlaceholderConfigurer" lazy-init="true">  
	    <property name="locations">  
	    	<list>  
	          	<value>classpath*:/application.properties</value>
	    	</list>  
	    </property>  
	</bean>
	
	<!-- 加载配置文件，需spring环境 -->
	<bean class="ikaoyaner.util.spring.SpringPropertiesUtil"/>
	
    <import resource="classpath*:spring-cache.xml"/>
    
    <!--定义solr的server-->
	<bean id="httpSolrServer" class="org.apache.solr.client.solrj.impl.LBHttpSolrServer">
		<constructor-arg index="0" value="${solr.url}"/>
		<property name="parser">
			<bean class="org.apache.solr.client.solrj.impl.XMLResponseParser"/>
		</property>
		<property name="connectionTimeout" value="${solr.connectionTimeout}"/>
	</bean>
    
	<!-- 自动扫描 -->
	<context:component-scan base-package="ikaoyaner.service">
        <context:exclude-filter type="regex" expression=".impl.*"/>
    </context:component-scan>
    
    <!-- 自定义模板 -->
   	<bean id="freeMarkerConfiguration" class="org.springframework.ui.freemarker.FreeMarkerConfigurationFactoryBean">
       <property name="templateLoaderPath" value="classpath:templates" />
       <property name="defaultEncoding" value="UTF-8"></property>
    </bean>
	
	<!-- 数据源配置 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">   
	   <!-- 基本属性 url、user、password -->  
	   <property name="url" value="${mysql.jdbc.url}" />  
	   <property name="username" value="${mysql.jdbc.username}" />  
	   <property name="password" value="${mysql.jdbc.password}" />  
	   <!-- 配置初始化大小、最小、最大 -->  
	   <property name="initialSize" value="${jdbc.initialSize}" />  
	   <property name="minIdle" value="${jdbc.minIdle}" />   
	   <property name="maxActive" value="${jdbc.maxActive}" />  
	   <!-- 配置获取连接等待超时的时间 -->  
	   <property name="maxWait" value="${jdbc.maxWait}" />  
	   <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->  
	   <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />  
	   <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->  
	   <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />  
	   <property name="validationQuery" value="${jdbc.validationQuery}" />  
	   <property name="testWhileIdle" value="${jdbc.testWhileIdle}" />  
	   <property name="testOnBorrow" value="${jdbc.testOnBorrow}" />  
	   <property name="testOnReturn" value="${jdbc.testOnReturn}" />  
	   <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->  
	   <property name="poolPreparedStatements" value="${jdbc.poolPreparedStatements}" />  
	   <property name="maxPoolPreparedStatementPerConnectionSize" value="${jdbc.maxPoolPreparedStatementPerConnectionSize}" />  
	   <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->  
	    <property name="filters" value="${jdbc.filters}" />   
	</bean>  

	<!-- Spring和MyBatis整合 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="mapperLocations" value="classpath:mapper/**/*.xml"/>
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
	</bean>
	
	<!-- 持久化模板SqlSessionTemplate注入 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
	  	<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
	
	<!-- 基础Dao的SqlSession注入 -->
	<bean id="baseDao" class="ikaoyaner.dao.BaseDao">
	  	<property name="sqlSession" ref="sqlSession" />
	</bean>
	
	<!-- DAO接口所在包-->
	<bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="ikaoyaner.dao.mapper"/>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
	</bean> 
	
	<!-- mysql事务管理 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	<!-- 使用annotation定义事务 	-->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" order="999" />
	
	<!-- 定义声明式事务 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
          <tx:attributes>           
             <tx:method name="get*" read-only="true" propagation="SUPPORTS"/>
             <tx:method name="find*" read-only="true" propagation="SUPPORTS"/>
             <tx:method name="save*" propagation="REQUIRED" rollback-for="Exception" />
             <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception" />
             <tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception" />
             <tx:method name="execute*" propagation="REQUIRED" rollback-for="Exception" />
             <tx:method name="synch*" propagation="REQUIRED" rollback-for="Exception" />
             <tx:method name="init*" propagation="REQUIRED" rollback-for="Exception" />
         </tx:attributes>
     </tx:advice>
     
     <aop:aspectj-autoproxy proxy-target-class="true"/>
     
     <aop:config>
     	<aop:pointcut expression="execution(public * ikaoyaner.service.*.impl.*.*(..))" id="txServicePoint"/>	       	          	   	     	
     	<aop:advisor advice-ref="txAdvice" pointcut-ref="txServicePoint" order="1000"/>
     </aop:config>
     
</beans>